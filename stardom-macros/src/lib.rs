#![warn(clippy::use_self)]

mod classes;
mod component;
mod create_named;
mod nodes;

use proc_macro::TokenStream;
use proc_macro2::Span;
use quote::{quote, ToTokens};
use syn::{parse_macro_input, Ident};

fn ident<S: AsRef<str>>(string: S) -> Ident {
    Ident::new(string.as_ref(), Span::call_site())
}

fn join(a: Span, b: Span) -> Span {
    a.join(b).unwrap_or(a)
}

#[proc_macro]
pub fn create_named(input: TokenStream) -> TokenStream {
    let input = parse_macro_input!(input as create_named::CreateNamed);
    input.into_token_stream().into()
}

#[proc_macro_attribute]
pub fn component(_args: TokenStream, input: TokenStream) -> TokenStream {
    let input = parse_macro_input!(input as component::Component);
    input.to_token_stream().into()
}

#[proc_macro]
pub fn fragment(input: TokenStream) -> TokenStream {
    let input = parse_macro_input!(input as nodes::Fragment);
    input.to_token_stream().into()
}

#[proc_macro]
pub fn element(input: TokenStream) -> TokenStream {
    let input = parse_macro_input!(input as nodes::Element);
    input.to_token_stream().into()
}

// code generated by stardom-codegen

macro_rules! define_tagged {
    ($($name:ident,)*) => {
        $(
            // #[doc = concat!("`&lt;", stringify!($name), "&gt;`")]
            #[doc = concat!("`<", stringify!($name), ">`")]
            #[doc = "\n"]
            #[doc = "See [`element`](element!) for more info."]
            #[proc_macro]
            pub fn $name(input: TokenStream) -> TokenStream {
                let name = stringify!($name);
                let mut extended = TokenStream::from(quote! { #name, });
                extended.extend(input);
                let input = parse_macro_input!(extended as nodes::Element);
                input.to_token_stream().into()
            }
        )*
    };
}

include!("include.rs");
